// ---------------------------------------------------------------------------------------------
// Google Cloud Platform (GCP) Project and Location Settings
// ---------------------------------------------------------------------------------------------

gcp_project_id = "your-gcp-project-id"
// Purpose: Specifies the unique identifier of the Google Cloud Project where all
//          resources for the Chronicle Sniffer pipeline will be deployed.
// How to fill: Replace "your-gcp-project-id" with your actual GCP Project ID.
// Example: "my-chronicle-infra-project"

gcp_region = "europe-west8"
// Purpose: Defines the primary GCP region for deploying regional resources like
//          Cloud Run, Pub/Sub topics, and potentially the test VM.
// How to fill: Choose a GCP region that is geographically close to your users/sniffers
//              or meets your data residency requirements.
// Example: "us-central1", "europe-west1", "asia-southeast1"

gcs_location = "EU"
// Purpose: Specifies the multi-region or region for Google Cloud Storage (GCS) buckets.
//          Using a multi-region (like "EU", "US", "ASIA") can provide higher availability
//          and lower latency for GCS operations across that continent.
// How to fill: Choose a GCS location. For multi-regions, use "EU", "US", or "ASIA".
//              For specific regions, use the region name, e.g., "europe-west8".
// Example: "US" (for US multi-region), "europe-west4" (for a specific region)

// ---------------------------------------------------------------------------------------------
// Naming and Identification
// ---------------------------------------------------------------------------------------------

base_name = "chronicle-sniffer"
// Purpose: A prefix used for naming many of the resources created by Terraform
//          (e.g., Service Accounts, Pub/Sub topics, Cloud Run service). This helps
//          in identifying and grouping resources related to this project.
// How to fill: Keep it descriptive and relatively short. It will be part of many
//              resource names, so avoid special characters phức tạp.
// Example: "network-telemetry-pipeline", "secops-pcap-processor"

// ---------------------------------------------------------------------------------------------
// Google Cloud Storage (GCS) Bucket Configuration
// ---------------------------------------------------------------------------------------------

incoming_pcap_bucket_name = "your-unique-incoming-pcap-bucket-name"
// Purpose: The globally unique name for the GCS bucket that will store raw .pcap files
//          uploaded by the on-premises/edge sniffers.
// How to fill: Bucket names must be GLOBALLY UNIQUE across all of GCP.
//              Choose a unique name. It's good practice to include the project ID or
//              a random suffix to ensure uniqueness.
// Example: "cs-projectx-incoming-pcaps-20240101", "mycompany-raw-traffic-bucket"

processed_udm_bucket_name = "your-unique-processed-udm-bucket-name"
// Purpose: The globally unique name for the GCS bucket that will store the processed
//          UDM (Unified Data Model) JSON files generated by the Cloud Run processor.
// How to fill: Similar to the incoming bucket, this name must be GLOBALLY UNIQUE.
// Example: "cs-projectx-processed-udm-20240101", "mycompany-udm-output-data"

// Optional: Bucket Versioning and CMEK (Customer-Managed Encryption Keys)
// enable_bucket_versioning = true
// Purpose: If true (default is false in variables.tf), enables versioning on GCS buckets,
//          which keeps a history of object versions. Useful for data recovery.
// How to fill: Uncomment and set to `true` if versioning is desired.

// cmek_key_name = "projects/YOUR_PROJECT/locations/YOUR_LOCATION/keyRings/YOUR_KEYRING/cryptoKeys/YOUR_KEY"
// Purpose: If you want to use Customer-Managed Encryption Keys for GCS buckets instead
//          of Google-managed keys.
// How to fill: Uncomment and provide the full path to your KMS key. If left commented or
//              empty (default in variables.tf), Google-managed keys will be used.

// ---------------------------------------------------------------------------------------------
// Docker Image URIs for Cloud Run Processor and On-Premises Sniffer
// ---------------------------------------------------------------------------------------------

processor_cloud_run_image = "your-region-docker.pkg.dev/your-gcp-project-id/your-artifact-repo/pcap-processor:latest"
// Purpose: The full URI of the Docker image for the PCAP Processor service that will
//          run on Cloud Run. This image should be hosted in Google Artifact Registry.
// How to fill: Replace with the actual URI of your pcap-processor Docker image.
//              The format is typically: REGION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/IMAGE_NAME:TAG
// Example: "europe-west8-docker.pkg.dev/my-chronicle-infra-project/sniffer-images/pcap-processor:v1.2.0"

sniffer_image_uri = "your-region-docker.pkg.dev/your-gcp-project-id/your-artifact-repo/onprem-sniffer:latest"
// Purpose: The full URI of the Docker image for the on-premises/edge sniffer.
//          This image will be pulled by the optional test VM or used for actual
//          on-premises deployments. It's recommended to host this in Artifact Registry as well.
// How to fill: Replace with the URI of your onprem-sniffer Docker image.
//              If using a public image (like from Docker Hub for testing), ensure it's accessible.
// Example: "europe-west8-docker.pkg.dev/my-chronicle-infra-project/sniffer-images/onprem-sniffer:v1.1.0",
//          "docker.io/yourusername/my-custom-sniffer:latest" (for Docker Hub)

// ---------------------------------------------------------------------------------------------
// Test Generator VM Configuration (Optional - for simulating an on-premises sniffer)
// ---------------------------------------------------------------------------------------------

test_vm_zone = "europe-west8-b"
// Purpose: The GCP zone where the optional test VM (for simulating an on-premises
//          sniffer) will be deployed. Should be in the `gcp_region`.
// How to fill: Choose a zone within your `gcp_region`.
// Example: "us-central1-a", "europe-west1-d"

test_vm_sniffer_id = "gce-test-sniffer"
// Purpose: The unique identifier for the sniffer instance running on the test VM.
//          This ID will be used in logs and metrics for identification.
// How to fill: Provide a descriptive ID. The default in variables.tf is "gce-test-sniffer".
// Example: "gce-lab-sniffer-01"

// ssh_source_ranges = ["YOUR_PUBLIC_IP_ADDRESS/32"]
// Purpose: A list of CIDR IP ranges allowed to SSH into the test VM.
//          CRITICAL for security: Restrict this to your IP address or specific bastion host IPs.
// How to fill: Uncomment and replace "YOUR_PUBLIC_IP_ADDRESS/32" with your actual
//              public IP address followed by /32 (e.g., "203.0.113.45/32").
//              To allow multiple IPs, use a list: ["203.0.113.45/32", "198.51.100.12/32"]
// WARNING: Leaving this as "0.0.0.0/0" (the default in variables.tf if not set here)
//          makes the VM accessible from anywhere on the internet, which is a security risk.

// ---------------------------------------------------------------------------------------------
// Cloud Run Service Configuration
// ---------------------------------------------------------------------------------------------

allow_unauthenticated_invocations = false
// Purpose: If true, the Cloud Run processor service can be invoked by anyone on the
//          internet (publicly accessible). If false (RECOMMENDED, default), invocations
//          are restricted, and Pub/Sub will use OIDC tokens for secure invocation.
// How to fill: Set to `false` for production or secure environments. `true` might be
//              used for very specific public API scenarios, but not for this pipeline.

cloud_run_max_concurrency = 10
// Purpose: The maximum number of concurrent requests that a single Cloud Run
//          instance (container) of the processor service will handle.
// How to fill: Adjust based on the expected load and the processing capacity of your
//              Cloud Run service. Default in Cloud Run is 80. Lower values might be
//              safer if processing is CPU/memory intensive.
// Example: 5 (for very intensive tasks), 80 (Cloud Run default)

cloud_run_cpu = "1000m"
// Purpose: The amount of CPU allocated to each Cloud Run instance. "1000m" equals 1 vCPU.
// How to fill: Choose based on the CPU requirements of tshark and the Python scripts.
//              Can be "1000m" (1 vCPU), "2000m" (2 vCPUs), etc., up to the limits.
// Example: "2000m" (for more CPU power), "500m" (for less)

cloud_run_memory = "2Gi" // Changed from 512Mi as it was causing interruptions during processing
// Purpose: The amount of memory allocated to each Cloud Run instance.
// How to fill: PCAP processing can be memory-intensive, especially tshark's JSON conversion.
//              Start with a reasonable amount (e.g., "1Gi", "2Gi") and monitor memory
//              usage to adjust if needed. 512Mi proved to be too little.
// Example: "1Gi", "4Gi"

// ---------------------------------------------------------------------------------------------
// Monitoring and Alerting (Optional)
// ---------------------------------------------------------------------------------------------

alert_notification_channel_id = ""
// Purpose: The full ID of a Cloud Monitoring Notification Channel to which alerts
//          (e.g., sniffer inactive) will be sent.
// How to fill:
//   1. Manually create a Notification Channel in GCP Console (Monitoring > Alerting > Edit Notification Channels).
//      This could be email, Slack, PagerDuty, etc. Complete any verification steps.
//   2. Copy the full Channel ID (e.g., "projects/your-gcp-project-id/notificationChannels/1234567890").
//   3. Paste the ID here.
//   If left as an empty string "" (default in variables.tf), the example alert policy
//   for an inactive sniffer will NOT be created.
// Example: "projects/my-chronicle-infra-project/notificationChannels/987654321098765432"
